var webgl, gui;
// initialize index for vinyl reading
var index = 0;
var indexCover = 0;
var indexMax = 79;
var indexMaxCover = 143;
var playing = false;

var mouseAlreadyMoved = false;
var controlsEnabled = false;

var moved = false;
var movingEnabled = true;

var coverAlreadyAdded = false;

var sceneEnded = false;

var glitchActivated = false;

// the setinterval for playing
var timer;

// http://stemkoski.github.io/Three.js/Shader-Glow.html
// http://www.jeux2notes.fr/jeux2notes/Jeux_video_files/tetrisflute.pdf

$(document).ready(init);

function init(){
    webgl = new Webgl(window.innerWidth, window.innerHeight);
    $('.three').append(webgl.renderer.domElement);

    gui = new dat.GUI();
    gui.close();

    $(window).on('resize', resizeHandler);

    // zoom on mouse wheel
    // document.body.addEventListener('mousewheel', mousewheel, false);
    // document.body.addEventListener('DOMMouseScroll', mousewheel, false); // firefox

    document.body.addEventListener('mousemove', mousemove);

    var k = [71, 76, 73, 84, 67, 72];  
    var n = 0; 

    // events on keyboard
    $(window).keydown(function(e) {
        if (e.keyCode === k[n++]) {  
            if (n === k.length) { 
                if(!glitchActivated) {
                    glitchActivated = true;
                    n = 0;
                }
                else {
                    glitchActivated = false;
                    n = 0;
                }
            }  
        }
        else if(e.keyCode == 37 && !playing && controlsEnabled) { // left
            n = 0;
            if(index < indexMax+1 && !moved) {
                webgl.goRight(index);
                index++;
            }
            else if(indexCover > 1 && moved) {
                webgl.goLeftCover(indexCover);
                indexCover--;
            }
        }
        else if(e.keyCode == 39 && !playing && controlsEnabled) { // right
            n = 0;
            if(index > 1 && !moved) {
                webgl.goLeft(index);
                index--;
            }
            else if(indexCover < indexMaxCover+1 && moved) {
                webgl.goRightCover(indexCover);
                indexCover++;
            }
        }
        else if(e.keyCode == 38 && !playing) { // up
            n = 0;
            if(index > 0 && index < indexMax+2 && !moved) {
                webgl.upCube(index-1);
            }
            if(indexCover > 0 && indexCover < indexMaxCover+2 && moved) {
                webgl.upCubeCover(indexCover-1);
            }
        }
        else if(e.keyCode == 40 && !playing) { // down
            n = 0;
            if(index > 0 && index < indexMax+2 && !moved) {
                webgl.downCube(index-1);
            }
            if(indexCover > 0 && indexCover < indexMaxCover+2 && moved) {
                webgl.downCubeCover(indexCover-1);
            }
        }
        else if(e.keyCode == 32) { // space
            n = 0;
            if(!playing && controlsEnabled) {
                playing = true;
                index = 0;
                //webgl.renderRotation();
                timer = setInterval(function(){webgl.render(index++)}, 150);
            }
            else {
                playing = false;
            }
        }
        else if(e.keyCode == 13 && !sceneEnded) { //enter
            n = 0;
            if(!moved && movingEnabled) {
                movingEnabled = false;
                moved = true;
                $('.pressEnter').html('Press enter to edit vinyl');
                $('.pressEchap').html('Press esc to start a new vinyl');
                // send to album cover
                webgl.moveAway();
            }
            else if(moved && movingEnabled){
                movingEnabled = false;
                moved = false;
                $('.pressEnter').html('Press enter to edit cover');
                $('.pressEchap').html('');
                webgl.moveForward();
            }
        }
        else if(e.keyCode == 27 && moved && !sceneEnded) { // escape
            n = 0;
            sceneEnded = true;
            $('.pressEnter').html('Press enter to edit cover');
            $('.pressEchap').html('');
            webgl.clearAllScene();
        }
    });

    var textContent = $('.textContent');

    textContent.css({
        'margin-left': (window.innerWidth - 800)/2,
        'margin-top': (window.innerHeight - 360)/2
    });

    $('.controls').css({
        'margin-left': (window.innerWidth - 201)/2
    });

    $('.textControls').css({
        'margin-left': (window.innerWidth - 800)/2
    });

    var colorArray = ['#4d73a0','#538ab2','#69acbc','#8fc4b5','#6ca995','#6ca995','#99e5cc',]
    $('.textContent .title span').each(function() {
        var randomIndex = Math.floor(Math.random() * (6 - 0 + 1));
        $(this).css({
            'color': colorArray[randomIndex]
        });
    });

    TweenLite.to(textContent, 2, {css:{opacity:0}, ease:Power3.easeInOut, delay: 1, onComplete: displayVinyl});

    
    //webgl.renderStart();
    animate();
}

function displayVinyl() {
    $('.textContent').css({
        "display": "none"
    });

    TweenLite.to($('.controls'), 2, {css:{opacity:1}, ease:Power3.easeInOut, onComplete: enableControls});
    webgl.displayStart();
}

function animateTextControls() {
    TweenLite.to($('.textControls'), 2, {css:{opacity:0.7}, ease:Power1.easeInOut, onComplete: hidetextControls});
}

function hidetextControls() {
    TweenLite.to($('.textControls'), 2, {css:{opacity:0.2}, ease:Power1.easeInOut, onComplete: animateTextControls});
}

function enableControls() {
    controlsEnabled = true;
    if(!coverAlreadyAdded) {
        coverAlreadyAdded = true;
        webgl.scene.add(webgl.cover);
    }
    animateTextControls();
}

function resizeHandler() {
    webgl.resize(window.innerWidth, window.innerHeight);
    var textContent = $('.textContent');

    textContent.css({
        'margin-left': (window.innerWidth - 800)/2,
        'margin-top': (window.innerHeight - 360)/2
    });

    $('.controls').css({
        'margin-left': (window.innerWidth - 201)/2
    });

    $('.textControls').css({
        'margin-left': (window.innerWidth - 800)/2
    });

}

function animate() {
    requestAnimationFrame(animate);
    if(playing || !mouseAlreadyMoved) {
        webgl.renderRotation();
    }
    webgl.renderStart();
}

function mousewheel(e) {
	if(e.wheelDelta > 0) {
		webgl.camera.position.z += 10;
	}
	else if(e.wheelDelta < 0) {
		webgl.camera.position.z -= 10;
	}
	webgl.renderStart();
}

function mousemove(e) {
    if(!mouseAlreadyMoved) {
        mouseAlreadyMoved = true;
    }
    if(!playing) {
        var xFromCenter = e.pageX - window.innerWidth/2;
        var yFromCenter = e.pageY - window.innerHeight/2;
        webgl.orientate(xFromCenter, yFromCenter);
        //console.log(xFromCenter+'/'+yFromCenter);
    }
}

var Webgl = (function(){

    function Webgl(width, height){
        this.vinylRotation = 0;
        // Basic three.js setup
        this.scene = new THREE.Scene();
        
        this.camera = new THREE.PerspectiveCamera(50, width / height, 1, 10000);
        this.camera.position.z = 200;
        //this.camera.rotation.z += Math.PI*(0)/180;

        var light = new THREE.PointLight(0xffffff, 1.3, 1000);
        light.position.set(0, 25, 100);
        this.scene.add(light);

        this.renderer = new THREE.WebGLRenderer();
        this.renderer.setSize(width, height);
        this.renderer.setClearColor(0x2D2D2D);

        var webgl = this;

        // Glow scene
        this.glowscene = new THREE.Scene();
        this.glowscene.add(new THREE.AmbientLight(0xffffff));

        $.ajax({
            dataType: "json",
            type: "GET",
            url: "./src/json/vinyl.json",
            success: function(data) {
                webgl.vinyl = new Vinyl(data);
            },
            async: false
        });

        $.ajax({
            dataType: "json",
            type: "GET",
            url: "./src/json/cover.json",
            success: function(data) {
                webgl.cover = new Cover(data);
            },
            async: false
        });

        this.scene.add(this.vinyl);
        //this.scene.add(this.cover);

        this.composer = new THREE.EffectComposer(this.renderer);
        this.composer.addPass(new THREE.RenderPass(this.scene, this.camera));

        this.glitchPass = new THREE.GlitchPass();
        this.glitchPass.goWild = 10;
        this.glitchPass.renderToScreen = true;
        this.composer.addPass(this.glitchPass);
    }

    Webgl.prototype.resize = function(width, height) {
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
    };

    Webgl.prototype.renderStart = function() {
        this.renderer.render(this.scene, this.camera);
        if(glitchActivated) {
            this.composer.render();
        }
        //console.log('test');
        if(!playing && ! sceneEnded) {
            this.vinyl.rotation.z += (this.vinylRotation - this.vinyl.rotation.z)*0.1;
        }
    };

    Webgl.prototype.render = function(index) {   
        //console.log('test'); 
        //this.renderer.render(this.scene, this.camera);
        //this.vinyl.update(0.1);
        if(playing) {
            this.vinyl.updateColor(index);
        }
        else {
            clearInterval(timer);
            this.vinyl.reset();
        }
    };

    Webgl.prototype.renderRotation = function(index) {   
        //console.log('test'); 
        this.vinyl.update(0.8);
    };

    Webgl.prototype.updateVinyl = function(degrees) {   
        this.vinyl.update(degrees); 
    };

    Webgl.prototype.goLeft = function(index) {
        this.vinyl.goLeft(index);
    };

    Webgl.prototype.goRight = function(index) {
        this.vinyl.goRight(index);
    };

    Webgl.prototype.goLeftCover = function(index) {
        this.cover.goLeft(index);
    };

    Webgl.prototype.goRightCover = function(index) {
        this.cover.goRight(index);
    };

    Webgl.prototype.upCube = function(index) {
        this.vinyl.upCube(index);
    };

    Webgl.prototype.downCube = function(index) {
        this.vinyl.downCube(index);
    };

    Webgl.prototype.upCubeCover = function(index) {
        this.cover.upCube(index);
    };

    Webgl.prototype.downCubeCover = function(index) {
        this.cover.downCube(index);
    };

    Webgl.prototype.orientate = function(x, y) {   
        this.vinylRotation = (Math.PI*(((x*180)/window.innerWidth)+180)/180);
        //this.vinyl.rotation.x = Math.PI*((y*10)/window.innerWidth)/180;;
    };

    Webgl.prototype.displayStart = function() {
        var sound = document.getElementById("startup");
        sound.play();
        TweenLite.to(this.vinyl.position, 2, {y:0, ease:Elastic.easeOut});
    }

    Webgl.prototype.moveAway = function() {
        this.vinyl.moveAway();
        this.cover.moveAway();
    }

    Webgl.prototype.moveForward = function() {
        this.vinyl.moveForward();
        this.cover.moveForward();
    }

    Webgl.prototype.clearAllScene = function() {
        var webgl = this;

        //this.vinyl.assembly();
        var vinyl = this.vinyl;
        TweenLite.to(vinyl.rotation, 2, {z: 0, ease: Power2.easeInOut});
        TweenLite.to(vinyl.position, 2, {x: 0, ease: Power2.easeInOut, onComplete: webgl.clearVinyl, onCompleteParams: [vinyl]});

        //this.cover.assembly();
        var cover = this.cover;
        TweenLite.to(cover.position, 2, {x: 0, ease: Power2.easeInOut, onComplete: webgl.clearCover, onCompleteParams: [cover, webgl]});

/*        setTimeout(function(){webgl.restartVariables()}, 3000);
        setTimeout(function(){webgl.restartVinyl()}, 4000);
        setTimeout(function(){webgl.restartCover()}, 7000);
*/    }

    Webgl.prototype.clearVinyl = function(vinyl) {
        TweenLite.to(vinyl.position, 2, {y:  window.innerHeight, ease: Power2.easeInOut});
    }

    Webgl.prototype.clearCover = function(cover, webgl) {
        TweenLite.to(cover.position, 2, {y: window.innerHeight, ease: Power2.easeInOut, onComplete: webgl.restart, onCompleteParams: [webgl]});
    }

    Webgl.prototype.restart = function(webgl) {
        webgl.restartVariables();
        webgl.restartVinyl();
        setTimeout(function(){webgl.restartCover()}, 2000);
    }

    Webgl.prototype.restartVinyl = function() {
        //this.rotation.y += Math.PI*90/180;
        this.vinyl.randomizeCubes();
        this.vinyl.position.y = window.innerHeight/8;
        this.vinyl.position.z = 0;
        this.vinyl.rotation.x = Math.PI*(-60)/180;
        this.vinyl.rotation.z = Math.PI*(180)/180;
        this.displayStart();
    }

    Webgl.prototype.restartCover = function() {
        this.cover.randomizeCubes();
        this.cover.position.z = -600;
        this.cover.position.y = 0;
        this.cover.rotation.x += Math.PI*(60)/180;
    }

    Webgl.prototype.restartVariables = function() {
        index = 0;
        indexCover = 0;
        indexMax = 79;
        indexMaxCover = 143;
        playing = false;
        mouseAlreadyMoved = false;
        controlsEnabled = true;
        moved = false;
        movingEnabled = true;
        coverAlreadyAdded = false;
        sceneEnded = false;
    }

    return Webgl;

})();
var Cover = (function(){

    function Cover(data){
        THREE.Object3D.call(this);
        this.cubeArray = [];
        //this.length = data.length;
        for (i = 0; i < data.length; i++) {
            //console.log(data[i].x);
            var myCube = new CubeCover(data[i].x, data[i].y, data[i].color);
            this.cubeArray.push(myCube);
            this.add(myCube);
        }
        this.position.z = -600;
        this.rotation.x += Math.PI*(60)/180;
    }

    Cover.prototype = new THREE.Object3D;
    Cover.prototype.constructor = Cover;

    Cover.prototype.moveAway = function() {
        cover = this;
        TweenLite.to(cover.position, 2, {z: -300, ease: Power2.easeInOut});
        TweenLite.to(cover.position, 2, {x: 100, ease: Power2.easeInOut});
        TweenLite.to(cover.rotation, 2, {x: 0, ease: Power2.easeInOut});
    }

    Cover.prototype.moveForward = function() {
        cover = this;
        TweenLite.to(cover.position, 2, {z: -600, ease: Power2.easeInOut});
        TweenLite.to(cover.position, 2, {x: 0, ease: Power2.easeInOut});
        TweenLite.to(cover.rotation, 2, {x: Math.PI*(60)/180, ease: Power2.easeInOut});
    }

    Cover.prototype.goLeft = function(indexCover) {
        //this.cubeArray[indexCover-2].setColor(0x000000);
        this.cubeArray[indexCover-2].material.emissive = new THREE.Color(this.cubeArray[indexCover-2].color);
        //this.cubeArray[indexCover-2].material.opacity = 0.8;
        if(indexCover < indexMaxCover+2) {
            var initialColor = this.cubeArray[indexCover-1].color;
            this.cubeArray[indexCover-1].material.emissive = new THREE.Color(0x000000);
            this.cubeArray[indexCover-1].material.color.setHex(initialColor);
            this.cubeArray[indexCover-1].material.opacity = 1;
        }
    };

    Cover.prototype.goRight = function(indexCover) {
        //this.cubeArray[indexCover].setColor(0x000000);
        this.cubeArray[indexCover].material.emissive = new THREE.Color(this.cubeArray[indexCover].color);
        //this.cubeArray[indexCover].material.opacity = 0.8;
        if(indexCover > 0) {
            var initialColor = this.cubeArray[indexCover-1].color;
            this.cubeArray[indexCover-1].material.emissive = new THREE.Color(0x000000);
            this.cubeArray[indexCover-1].material.color.setHex(initialColor);
            this.cubeArray[indexCover-1].material.opacity = 1;
        }
    };

    Cover.prototype.upCube = function(indexCover) {
        this.cubeArray[indexCover].upCube();
        var initialColor = this.cubeArray[indexCover].color;
        this.cubeArray[indexCover].material.emissive = new THREE.Color(this.cubeArray[indexCover].color);
    };

    Cover.prototype.downCube = function(indexCover) {
        this.cubeArray[indexCover].downCube();
        var initialColor = this.cubeArray[indexCover].color;
        this.cubeArray[indexCover].material.emissive = new THREE.Color(this.cubeArray[indexCover].color);
    };

    Cover.prototype.assembly = function() {
        var cover = this;
        TweenLite.to(this.position, 2, {x: 0, ease: Power2.easeInOut, onComplete: cover.clear, onCompleteParams:[cover]});
    };

    Cover.prototype.clear = function(cover) {
        TweenLite.to(cover.position, 2, {y: window.innerHeight, ease: Power2.easeInOut});
    };

    Cover.prototype.randomizeCubes = function() {
        for(var i = 0; i < indexMaxCover+1; i++) {
            this.cubeArray[i].randomize();
        }
    }

    return Cover;
})();
var Cube = (function(){

    function Cube(posX, posY, depth, color){
        
        //console.log(posX+'/'+posY);
        THREE.Object3D.call(this);
        this.posX = posX;
        this.posY = posY;
        this.widthCube = 10;
        this.heightCube = 10;
        //this.depthCube = depth;
        
        if (color == "white") {
            this.color = 0xffffff;
            this.depthCube = 10;
            modif = 0;
        }
        else {
            //this.color = Math.random()*0xffffff;
            this.depthCube = 10;
            //modif = Math.floor(Math.random() * (21 - 7 + 1)) + 7;
            modif = depth;
            switch(modif) {
                case 7:
                    this.color = 0x28224a;
                    break;

                case 8:
                    this.color = 0x59548f;
                    break;

                case 9:
                    this.color = 0x2a2f56;
                    break;

                case 10:
                    this.color = 0x2c446f;
                    break;

                case 11:
                    this.color = 0x4d73a0;
                    break;

                case 12:
                    this.color = 0x538ab2;
                    break;

                case 13:
                    this.color = 0x69acbc;
                    break;

                case 14:
                    this.color = 0x8fc4b5;
                    break;

                case 15:
                    this.color = 0x6ca995;
                    break;

                case 16:
                    this.color = 0x99e5cc;
                    break;

                case 17:
                    this.color = 0x728164;
                    break;

                case 18:
                    this.color = 0xa8cb7a;
                    break;

                case 19:
                    this.color = 0xc9e986;
                    break;

                case 20:
                    this.color = 0xa09d6b;
                    break;

                case 21:
                    this.color = 0xb6b37b;
                    break;

                default:
                    this.color = 0xcfcc97;
                    break;
            }
        }

        geometry = new THREE.BoxGeometry(this.widthCube, this.heightCube, this.depthCube);

        this.material = new THREE.MeshPhongMaterial({
            ambient: 0xffffff,
            color: this.color,
            specular: 0x000000,
            shininess: 100000, 
            wireframe: false, 
            transparent: true, 
            shading: THREE.SmoothShading
        });
        this.mesh = new THREE.Mesh(geometry, this.material);
        this.mesh.scale.z += 0.01*modif;
        this.depthCube = modif;
        this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), ((this.depthCube/2)-this.widthCube/2));
        //this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), 0);
        this.add(this.mesh);
    }

    Cube.prototype = new THREE.Object3D;
    Cube.prototype.constructor = Cube;

    Cube.prototype.update = function() {
        //this.mesh.rotation.y += 0.01;
    };

    Cube.prototype.setColor = function(hex) {
        this.playSound(this.depthCube);
    };

    Cube.prototype.upCube = function() {
        //console.log('upCube');
        if(this.depthCube < 21) {
            this.depthCube++;
            //console.log(this.depthCube);
            this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), (this.depthCube/2)-this.widthCube/2);
            this.mesh.scale.z += 0.01;
            this.playSound(this.depthCube);
        }
    };

    Cube.prototype.downCube = function() {
        //console.log('downCube');
        if(this.depthCube > 7) {
            this.depthCube--;
            //console.log(this.depthCube);
            this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), (this.depthCube/2)-this.widthCube/2);
            this.mesh.scale.z -= 0.01;
            this.playSound(this.depthCube);
        }
    };

    Cube.prototype.playSound = function(note) {
        switch(note) {
            case 7:
                this.color = 0x28224a;
                idSound = "blank";
                break;

            case 8:
                this.color = 0x59548f;
                idSound = "c";
                break;

            case 9:
                this.color = 0x2a2f56;
                idSound = "d";
                break;

            case 10:
                this.color = 0x2c446f;
                idSound = "e";
                break;

            case 11:
                this.color = 0x4d73a0;
                idSound = "f";
                break;

            case 12:
                this.color = 0x538ab2;
                idSound = "g";
                break;

            case 13:
                this.color = 0x69acbc;
                idSound = "a";
                break;

            case 14:
                this.color = 0x8fc4b5;
                idSound = "b";
                break;

            case 15:
                this.color = 0x6ca995;
                idSound = "c7";
                break;

            case 16:
                this.color = 0x99e5cc;
                idSound = "d7";
                break;

            case 17:
                this.color = 0x728164;
                idSound = "e7";
                break;

            case 18:
                this.color = 0xa8cb7a;
                idSound = "f7";
                break;

            case 19:
                this.color = 0xc9e986;
                idSound = "g7";
                break;

            case 20:
                this.color = 0xa09d6b;
                idSound = "a7";
                break;

            case 21:
                this.color = 0xb6b37b;
                idSound = "b7";
                break;

            default:
                this.color = 0x1d173d;
                idSound = "blank";
                break;
        }
        if(idSound == "blank") {
            setTimeout(function(){},100);
        }
        else {
            var sound = document.getElementById(idSound);
            sound.play();
            setTimeout(function(){sound.pause()},100);
        }
    }

    Cube.prototype.resetColors = function() {
        this.material.emissive = new THREE.Color(0x000000);
    };

    Cube.prototype.resetPosition = function() {
        TweenLite.to(this.mesh.position, 2, {z: (this.depthCube/2)-this.widthCube/2, ease:Elastic.easeOut})
    };

    Cube.prototype.randomize = function() {
        this.depthCube = Math.floor(Math.random() * (21 - 7 + 1)) + 7;
        switch(this.depthCube) {
            case 7:
                this.color = 0x28224a;
                break;

            case 8:
                this.color = 0x59548f;
                break;

            case 9:
                this.color = 0x2a2f56;
                break;

            case 10:
                this.color = 0x2c446f;
                break;

            case 11:
                this.color = 0x4d73a0;
                break;

            case 12:
                this.color = 0x538ab2;
                break;

            case 13:
                this.color = 0x69acbc;
                break;

            case 14:
                this.color = 0x8fc4b5;
                break;

            case 15:
                this.color = 0x6ca995;
                break;

            case 16:
                this.color = 0x99e5cc;
                break;

            case 17:
                this.color = 0x728164;
                break;

            case 18:
                this.color = 0xa8cb7a;
                break;

            case 19:
                this.color = 0xc9e986;
                break;

            case 20:
                this.color = 0xa09d6b;
                break;

            case 21:
                this.color = 0xb6b37b;
                break;

            default:
                this.color = 0xcfcc97;
                break;
        }
        this.material.color.setHex(this.color);
        this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), ((this.depthCube/2)-this.widthCube/2));
    };

    return Cube;
})();
var CubeCover = (function(){

    function CubeCover(posX, posY, color){
        THREE.Object3D.call(this);
        this.posX = posX;
        this.posY = posY;
        this.widthCube = 10;
        this.heightCube = 10;
        this.depthCube = 10;

        if(color == 7) {
            this.customColor = Math.floor(Math.random() * (9 - 7 + 1)) + 7;
        }
        else if(color == 12) {
            this.customColor = Math.floor(Math.random() * (14 - 12 + 1)) + 12;
        }

        switch(this.customColor) {
            case 7:
                this.color = 0x28224a;
                break;

            case 8:
                this.color = 0x59548f;
                break;

            case 9:
                this.color = 0x2a2f56;
                break;

            case 10:
                this.color = 0x2c446f;
                break;

            case 11:
                this.color = 0x4d73a0;
                break;

            case 12:
                this.color = 0x538ab2;
                break;

            case 13:
                this.color = 0x69acbc;
                break;

            case 14:
                this.color = 0x8fc4b5;
                break;

            case 15:
                this.color = 0x6ca995;
                break;

            case 16:
                this.color = 0x99e5cc;
                break;

            case 17:
                this.color = 0x728164;
                break;

            case 18:
                this.color = 0xa8cb7a;
                break;

            case 19:
                this.color = 0xc9e986;
                break;

            case 20:
                this.color = 0xa09d6b;
                break;

            case 21:
                this.color = 0xb6b37b;
                break;

            default:
                this.color = 0xcfcc97;
                break;
        }

        geometry = new THREE.BoxGeometry(this.widthCube, this.heightCube, this.depthCube);

        this.material = new THREE.MeshPhongMaterial({
            ambient: 0xffffff,
            color: this.color,
            specular: 0x000000,
            shininess: 100000, 
            wireframe: false, 
            transparent: true, 
            shading: THREE.SmoothShading
        });
        this.mesh = new THREE.Mesh(geometry, this.material);
        this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), this.depthCube - (this.widthCube/2));
        //this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), 0);
        this.add(this.mesh);
    }

    CubeCover.prototype = new THREE.Object3D;
    CubeCover.prototype.constructor = CubeCover;

    CubeCover.prototype.upCube = function() {
        //console.log('upCube');
        if(this.customColor < 21) {
            this.customColor++;
            this.changeColor(this.customColor);
        }
    };

    CubeCover.prototype.downCube = function() {
        //console.log('downCube');
        if(this.customColor > 7) {
            this.customColor--;
            this.changeColor(this.customColor);
        }
    };

    CubeCover.prototype.changeColor = function(customColor) {
        switch(customColor) {
            case 7:
                this.color = 0x28224a;
                break;

            case 8:
                this.color = 0x59548f;
                break;

            case 9:
                this.color = 0x2a2f56;
                break;

            case 10:
                this.color = 0x2c446f;
                break;

            case 11:
                this.color = 0x4d73a0;
                break;

            case 12:
                this.color = 0x538ab2;
                break;

            case 13:
                this.color = 0x69acbc;
                break;

            case 14:
                this.color = 0x8fc4b5;
                break;

            case 15:
                this.color = 0x6ca995;
                break;

            case 16:
                this.color = 0x99e5cc;
                break;

            case 17:
                this.color = 0x728164;
                break;

            case 18:
                this.color = 0xa8cb7a;
                break;

            case 19:
                this.color = 0xc9e986;
                break;

            case 20:
                this.color = 0xa09d6b;
                break;

            case 21:
                this.color = 0xb6b37b;
                break;

            default:
                this.color = 0x1d173d;
                break;
        }
    }

    CubeCover.prototype.randomize = function() {
        //var this.customColor = Math.floor(Math.random() * (21 - 7 + 1)) + 7;
        this.customColor = 7;
        switch(this.customColor) {
            case 7:
                this.color = 0x28224a;
                break;

            case 8:
                this.color = 0x59548f;
                break;

            case 9:
                this.color = 0x2a2f56;
                break;

            case 10:
                this.color = 0x2c446f;
                break;

            case 11:
                this.color = 0x4d73a0;
                break;

            case 12:
                this.color = 0x538ab2;
                break;

            case 13:
                this.color = 0x69acbc;
                break;

            case 14:
                this.color = 0x8fc4b5;
                break;

            case 15:
                this.color = 0x6ca995;
                break;

            case 16:
                this.color = 0x99e5cc;
                break;

            case 17:
                this.color = 0x728164;
                break;

            case 18:
                this.color = 0xa8cb7a;
                break;

            case 19:
                this.color = 0xc9e986;
                break;

            case 20:
                this.color = 0xa09d6b;
                break;

            case 21:
                this.color = 0xb6b37b;
                break;

            default:
                this.color = 0xcfcc97;
                break;
        }
        this.material.color.setHex(this.color);
        this.mesh.position.set(this.posX*10 + (this.widthCube/2), this.posY*10 - (this.widthCube/2), ((this.depthCube/2)-this.widthCube/2));
    };

    return CubeCover;
})();
var Vinyl = (function(){

    function Vinyl(data){
        THREE.Object3D.call(this);
        this.cubeArray = [];
        //this.length = data.length;
        for (i = 0; i < data.length; i++) {
            //console.log(data[i].x);
            var myCube = new Cube(data[i].x, data[i].y, data[i].depth, data[i].color);
            this.cubeArray.push(myCube);
            this.add(myCube);
        }
        //this.rotation.y += Math.PI*90/180;
        this.position.y = window.innerHeight/8;
        this.rotation.x += Math.PI*(-60)/180;
        this.rotation.z += Math.PI*(180)/180;
    }

    Vinyl.prototype = new THREE.Object3D;
    Vinyl.prototype.constructor = Vinyl;

    Vinyl.prototype.update = function(degrees) {

        this.rotation.z += Math.PI*degrees/180;
        if(this.rotation.z >= Math.PI*360/180) {
            this.rotation.z -= Math.PI*360/180;
        }
    };

    Vinyl.prototype.updateColor = function(index) {
        if(index < this.cubeArray.length && this.cubeArray[index].color != 0xffffff) {
            this.cubeArray[index].material.emissive = new THREE.Color(this.cubeArray[index].color);
            //this.cubeArray[index].material.opacity = 0.8;
            TweenLite.to(this.cubeArray[index].mesh.position, 2, {z:0, ease:Elastic.easeOut});
            this.cubeArray[index].playSound(this.cubeArray[index].depthCube);
        }
        else {
            playing = false;
        }
    };

    Vinyl.prototype.goLeft = function(index) {
        //this.cubeArray[index-2].setColor(0x000000);
        this.cubeArray[index-2].material.emissive = new THREE.Color(this.cubeArray[index-2].color);
        //this.cubeArray[index-2].material.opacity = 0.8;
        this.cubeArray[index-2].setColor(initialColor);
        if(index < indexMax+2) {
            var initialColor = this.cubeArray[index-1].color;
            this.cubeArray[index-1].material.emissive = new THREE.Color(0x000000);
            this.cubeArray[index-1].material.color.setHex(initialColor);
            this.cubeArray[index-1].material.opacity = 1;
        }
    };

    Vinyl.prototype.goRight = function(index) {
        //this.cubeArray[index].setColor(0x000000);
        this.cubeArray[index].material.emissive = new THREE.Color(this.cubeArray[index].color);
        //this.cubeArray[index].material.opacity = 0.8;
        this.cubeArray[index].setColor(initialColor);
        if(index > 0) {
            var initialColor = this.cubeArray[index-1].color;
            this.cubeArray[index-1].material.emissive = new THREE.Color(0x000000);
            this.cubeArray[index-1].material.color.setHex(initialColor);
            this.cubeArray[index-1].material.opacity = 1;
        }
    };

    Vinyl.prototype.upCube = function(index) {
        this.cubeArray[index].upCube();
        var initialColor = this.cubeArray[index].color;
        this.cubeArray[index].material.emissive = new THREE.Color(this.cubeArray[index].color);
        this.cubeArray[index].setColor(initialColor);
    };

    Vinyl.prototype.downCube = function(index) {
        this.cubeArray[index].downCube();
        var initialColor = this.cubeArray[index].color;
        this.cubeArray[index].material.emissive = new THREE.Color(this.cubeArray[index].color);
        this.cubeArray[index].setColor(initialColor);
    };

    Vinyl.prototype.reset = function() {
        controlsEnabled = true;
        for(var i = 0; i < this.cubeArray.length; i++) {
            index = 0;
            this.cubeArray[i].resetColors();
            this.cubeArray[i].resetPosition();
        }
    };

    Vinyl.prototype.moveAway = function() {
        var vinyl = this;
        TweenLite.to(this.position, 2, {z: -310, ease: Power2.easeInOut});
        TweenLite.to(this.position, 2, {x: -100, ease: Power2.easeInOut});
        TweenLite.to(this.rotation, 2, {x: 0, ease: Power2.easeInOut, onComplete: vinyl.setMovingEnabled});
    };

    Vinyl.prototype.moveForward = function() {
        var vinyl = this;
        TweenLite.to(this.position, 2, {z: 0, ease: Power2.easeInOut});
        TweenLite.to(this.position, 2, {x: 0, ease: Power2.easeInOut});
        TweenLite.to(this.rotation, 2, {x: Math.PI*(-60)/180, ease: Power2.easeInOut, onComplete: vinyl.setMovingEnabled});
    };

    Vinyl.prototype.setMovingEnabled = function() {
        movingEnabled = !movingEnabled;
    }

    Vinyl.prototype.assembly = function() {
        var vinyl = this;
        TweenLite.to(this.rotation, 2, {z: 0, ease: Power2.easeInOut});
        TweenLite.to(this.position, 2, {x: 0, ease: Power2.easeInOut, onComplete: vinyl.clear, onCompleteParams:[vinyl]});
    }

    Vinyl.prototype.clear = function(vinyl) {
        TweenLite.to(vinyl.position, 2, {y:  window.innerHeight, ease: Power2.easeInOut});
    }

    Vinyl.prototype.randomizeCubes = function() {
        for(var i = 0; i < indexMax; i++) {
            this.cubeArray[i].randomize();
        }
    }

    return Vinyl;
})();
//# sourceMappingURL=app.min.js.map